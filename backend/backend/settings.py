"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import os
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "backend\your_google_credentials.json"
PERSPECTIVE_API_KEY = "AIzaSyClrrJptAEwgdgmm3PyCoXb7IflrynDias"
# import os
# # Get the BASE_DIR (Root directory of the Django project)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# # Set Google Application Credentials
# GOOGLE_CREDENTIALS_PATH = os.path.join(BASE_DIR, "your_google_credentials.json")

# # Apply the environment variable
# os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = GOOGLE_CREDENTIALS_PATH


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-bqy$@b9u0rdo_-5#t9=^bcdx6(4t4b-)+5#%6b@y(m15%_i%%p"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
AUTH_USER_MODEL = 'login.Custom_User'
# ASGI Application
ASGI_APPLICATION = "backend.asgi.application"

# Channel Layers (Using Redis)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                "redis://:Oc5t0fm8ano4veVf2U8xDAfqY1dI4Qgx@redis-18024.c264.ap-south-1-1.ec2.redns.redis-cloud.com:18024/0"
            ],
        },
    },
}

# Application definition
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # React development server
]
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "login",
    "elections",
    "Auto_Leave",
    "CampusFacility",
    "Complaints",
    "EventApproval",
    'channels',
    'django_celery_beat',
    'corsheaders',
    'authtools',
    'rest_framework',
    'rest_framework_simplejwt',
    'exam',
]
REST_FRAMEWORK = { 
    'DEFAULT_AUTHENTICATION_CLASSES': [ 
        'rest_framework_simplejwt.authentication.JWTAuthentication', 
    ], 
}
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:Oc5t0fm8ano4veVf2U8xDAfqY1dI4Qgx@redis-18024.c264.ap-south-1-1.ec2.redns.redis-cloud.com:18024/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'backend',
#         'USER': 'postgres',
#         'PASSWORD': 'adminpy',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3"
    }
}

CELERY_BROKER_URL = 'redis://:Oc5t0fm8ano4veVf2U8xDAfqY1dI4Qgx@redis-18024.c264.ap-south-1-1.ec2.redns.redis-cloud.com:18024/0'
CELERY_RESULT_BACKEND='redis://:Oc5t0fm8ano4veVf2U8xDAfqY1dI4Qgx@redis-18024.c264.ap-south-1-1.ec2.redns.redis-cloud.com:18024/0'
CELERY_ACCEPT_CONTENT=['application/json']
CELERY_RESULT_SELERLIZER='json'
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Use your SMTP provider
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'omwasu20@gmail.com'  # Your email
EMAIL_HOST_PASSWORD = 'dtbr nncl vqjk bqdz'  # App password (not your email password)
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),  # Short-lived access token
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # Long-lived refresh token
    "ROTATE_REFRESH_TOKENS": True,  # Generate new refresh tokens on refresh
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklist old refresh tokens
    "AUTH_HEADER_TYPES": ("Bearer",),
}
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
